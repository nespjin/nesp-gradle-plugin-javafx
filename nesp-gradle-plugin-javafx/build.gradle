/*
 * Copyright (C) 2021 The NESP Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.14.0'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'groovy'
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = '../../local-plugin-repository'
        }
    }
}
pluginBundle {
    website = 'https://github.com/nespjin/nesp-gradle-plugin-javafx'
    vcsUrl = 'https://github.com/nespjin/nesp-gradle-plugin-javafx'
    tags = ['NESP', 'JavaFx', 'FXML']
}

group 'com.nesp'
version '1.1'

gradlePlugin {
    plugins {
        NespJavaFx {
            id = 'com.nesp.javafx'
            displayName = 'Nesp JavaFx Plugin '
            description = 'A plugin that helps you develop JavaFx project easilly.'
            implementationClass = 'com.nesp.gradle.plugin.javafx.JavaFxPlugin'
        }
    }
}

repositories {
    mavenCentral()
}

def jfxVersion = '17.0.1'

dependencies {
    implementation 'com.squareup:javapoet:1.13.0'

    implementation 'org.openjfx:javafx-controls:' + jfxVersion
    implementation 'org.openjfx:javafx-graphics:' + jfxVersion
    implementation 'org.openjfx:javafx-fxml:' + jfxVersion

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

javafx {
    version = jfxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}