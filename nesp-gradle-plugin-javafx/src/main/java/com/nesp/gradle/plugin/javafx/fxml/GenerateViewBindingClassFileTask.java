/*
 * Copyright (C) 2021 The NESP Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.nesp.gradle.plugin.javafx.fxml;

import com.nesp.gradle.plugin.javafx.Config;
import com.nesp.gradle.plugin.javafx.JavaFxPlugin;
import com.squareup.javapoet.*;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import org.gradle.api.Project;
import org.gradle.api.tasks.TaskAction;

import javax.inject.Inject;
import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.ResourceBundle;


public abstract class GenerateViewBindingClassFileTask extends BaseFxmlTask {
    private static final String TAG = "GenerateViewBindingClassFileTask";

    @Inject
    public GenerateViewBindingClassFileTask() {
    }

    @TaskAction
    public void run() {
        JavaFxPlugin.printLog("GenerateViewBindingClassFileTask", "run");
        final Project project = getProject();
        final File desFile = getSourcePathGenerate();
        final String packageName = getPackageName();
        final ClassLoader classLoader = getClassLoader();

        final List<File> fxmlFiles = scanProjectFxmlFiles(project);

        final List<ClassModel> viewBindingClasses = new ArrayList<>();

        for (final File fxmlFile : fxmlFiles) {
            final ViewBindingFXMLParser viewBindingFXMLParser = new ViewBindingFXMLParser();
            viewBindingFXMLParser.setClassLoader(classLoader);
            try {
                viewBindingFXMLParser.parse(fxmlFile);
                viewBindingClasses.add(viewBindingFXMLParser.getViewBindingClass());
            } catch (FXMLParseException e) {
                e.printStackTrace();
            }
        }

        for (final ClassModel viewBindingClass : viewBindingClasses) {

            final String className = viewBindingClass.getClassName();
            TypeSpec.Builder classBuilder = TypeSpec
                    .classBuilder(className)
                    .addJavadoc("Generated by NespJavaFxPlugin, do not edit!!!")
                    .addModifiers(Modifier.PUBLIC);

            List<ClassField> fields = viewBindingClass.getFields();
            for (ClassField field : fields) {
                FieldSpec.Builder filedBuilder = FieldSpec.builder(field.getType(), field.getName(), Modifier.PUBLIC);
                filedBuilder.annotations.add(AnnotationSpec.builder(FXML.class).build());
                classBuilder.addField(filedBuilder.build());
            }

            final MethodSpec.Builder inflateMethodBuilder = MethodSpec.methodBuilder("inflate");
            inflateMethodBuilder.addParameter(String.class, "fxmlFile", Modifier.FINAL);
            inflateMethodBuilder.addParameter(ResourceBundle.class, "resourceBundle", Modifier.FINAL);

            inflateMethodBuilder.beginControlFlow("try");
            inflateMethodBuilder.addStatement("final boolean[] isInitialized = {false}");
            inflateMethodBuilder
                    .beginControlFlow("final " + className + " viewBinding = new " + className + "()");
            inflateMethodBuilder.addCode("@$T\n", Override.class);
            inflateMethodBuilder.beginControlFlow("public void initialize(final URL location, final ResourceBundle resources)");
            inflateMethodBuilder.addStatement("super.initialize(location, resources)");
            inflateMethodBuilder.addStatement("isInitialized[0] = true");
            inflateMethodBuilder.endControlFlow();
            inflateMethodBuilder.endControlFlow("");
            inflateMethodBuilder
                    .addStatement("final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader()");
            inflateMethodBuilder
                    .addStatement("final FXMLLoader fxmlLoader = new $T(" +
                            "$T.requireNonNull(contextClassLoader.getResource(fxmlFile)), resourceBundle" +
                            ")", FXMLLoader.class, Objects.class);
            inflateMethodBuilder.addStatement("fxmlLoader.setController(viewBinding)");
            inflateMethodBuilder.addStatement("fxmlLoader.load()");
            inflateMethodBuilder.addStatement("final long beginWaitTime = System.currentTimeMillis()");
            inflateMethodBuilder.beginControlFlow("while (!isInitialized[0])");
            inflateMethodBuilder.addStatement("if (System.currentTimeMillis() - beginWaitTime > 3 * 1000) break");
            inflateMethodBuilder.endControlFlow();
            inflateMethodBuilder.addStatement("return viewBinding");
            inflateMethodBuilder.endControlFlow();
            inflateMethodBuilder.beginControlFlow("catch ($T e)", IOException.class);
            inflateMethodBuilder.addStatement("throw new $T(e)", RuntimeException.class);
            inflateMethodBuilder.endControlFlow();

            inflateMethodBuilder.addModifiers(Modifier.STATIC, Modifier.PUBLIC);
            inflateMethodBuilder.returns(ClassName.get("", className));

            classBuilder.addMethod(inflateMethodBuilder.build());


            List<ClassMethod> classMethods = viewBindingClass.getClassMethods();

            for (ClassMethod classMethod : classMethods) {
                MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(classMethod.getName());
                methodBuilder.addModifiers(com.nesp.gradle.plugin.javafx.fxml.Modifier.toVmModifiers(classMethod.getModifiers()));
                List<ClassMethod.Param> params = classMethod.getParams();
                Class<?>[] paramClasses;
                if (params != null) {
                    paramClasses = new Class[params.size()];
                    for (int i = 0, paramsSize = params.size(); i < paramsSize; i++) {
                        final ClassMethod.Param param = params.get(i);
                        try {
                            final String paramClassName = param.getType().getTypeName();
                            if (paramClassName != null && !paramClassName.isEmpty()) {
                                paramClasses[i] = Class.forName(paramClassName);
                            }
                        } catch (ClassNotFoundException e) {
                            e.printStackTrace();
                        }
                        ParameterSpec parameterSpec =
                                ParameterSpec.builder(param.getType(), param.getName(), Modifier.FINAL).build();
                        methodBuilder.addParameter(parameterSpec);
                    }
                }

                final StringBuilder methodString = new StringBuilder(classMethod.getName() + "(");
                if (params != null && !params.isEmpty()) {
                    for (int i = 0, paramsSize = params.size(); i < paramsSize; i++) {
                        final ClassMethod.Param param = params.get(i);
                        if (i != 0) {
                            methodString.append(",");
                        }
                        methodString.append(param.getName());
                    }
                }
                methodString.append(")");

                methodBuilder.returns(classMethod.getReturnType());
                classBuilder.addMethod(methodBuilder.build());
            }

            JavaFile.Builder javaFileBuilder = JavaFile.builder(packageName, classBuilder.build());
            javaFileBuilder.addFileComment(Config.CLASS_LICENSE_COMMENT);
            File file = new File(desFile.getAbsolutePath());
            if (!file.getParentFile().exists()) {
                if (!file.getParentFile().mkdirs()) {
                    JavaFxPlugin.printLog(TAG, "file's parent create failed");
                }
            }
            try {
                javaFileBuilder.build().writeTo(file);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }


}
