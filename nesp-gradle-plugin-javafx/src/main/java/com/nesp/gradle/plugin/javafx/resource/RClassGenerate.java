/*
 * Copyright (C) 2021 The NESP Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.nesp.gradle.plugin.javafx.resource;

import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class RClassGenerate {

    private static final String R_CLASS_NAME = "R";

    private final File mSourceDir;
    private final String mPackageName;
    private final List<RInnerClass> mRInnerClasses;

    public RClassGenerate(File sourceDir, String packageName, List<RInnerClass> rInnerClasses) {
        this.mSourceDir = sourceDir;
        this.mPackageName = packageName;
        this.mRInnerClasses = rInnerClasses;
    }

    public void generate() {
        TypeSpec.Builder rClassBuilder = TypeSpec
                .classBuilder(R_CLASS_NAME)
                .addJavadoc("Generated by NespJavaFxPlugin, do not edit!!!")
                .addModifiers(Modifier.PUBLIC)
                .addModifiers(Modifier.FINAL);

        System.out.println("mRInnerClasses = " + mRInnerClasses);
        if (mRInnerClasses != null && !mRInnerClasses.isEmpty()) {
            for (RInnerClass rInnerClass : mRInnerClasses) {
                rClassBuilder.addType(buildRInnerClassTypeSpec(rInnerClass));
            }
        }

        JavaFile.Builder javaFileBuilder = JavaFile.builder(mPackageName, rClassBuilder.build());
        File file = new File(mSourceDir.getAbsolutePath());
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }
        try {
            javaFileBuilder.build().writeTo(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private TypeSpec buildRInnerClassTypeSpec(RInnerClass rInnerClass) {
        TypeSpec.Builder rInnerClassBuilder = TypeSpec
                .classBuilder(rInnerClass.getName())
                .addJavadoc(rInnerClass.getjDoc())
                .addModifiers(Modifier.PUBLIC)
                .addModifiers(Modifier.STATIC)
                .addModifiers(Modifier.FINAL);
        Set<Map.Entry<Object, Object>> fieldEntries = rInnerClass.getFields().entrySet();
        for (Map.Entry<Object, Object> fieldEntry : fieldEntries) {
            FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(
                    String.class,
                    String.valueOf(fieldEntry.getKey()),
                    Modifier.PUBLIC,
                    Modifier.STATIC,
                    Modifier.FINAL
            );
            fieldSpecBuilder.initializer("\"" + fieldEntry.getKey() + "\"", "");
            rInnerClassBuilder.addField(fieldSpecBuilder.build());
        }
        return rInnerClassBuilder.build();
    }


}
